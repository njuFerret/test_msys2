name: Test build Qt

on:
  push:
    branches: [ "dev" ]

jobs:
  build:
    name: Test build Qt
    runs-on: 
      - windows-2022

    steps:
      # - name: check out openssl
      #   uses: actions/checkout@v4
      #   with:
      #     repository: 'openssl/openssl'
      #     ref: 'openssl-${{ inputs.openssl-version }}'
      - name: check out 
        uses: actions/checkout@v4        

      # - uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: UCRT64          
      #     update: false
      #     # install: >-
      #     #   perl

      # - name: get clazy
      #   uses: actions/checkout@v4.1.1
      #   with:
      #     repository: 'KDE/clazy'
      #     # ref: 'openssl-${{ inputs.openssl-version }}'
      #     ref: 'v1.12'
      #     path: clazy

      
      # - name: Config Enviroment and build
      #   shell: cmd
      #   run: |
      #     set mingw=MinGW-x86_64-13.1.0-release-posix-seh-ucrt-rt_v11-rev1
      #     set START=%CD%
      #     set CLANG_INSTALL_DIR=D:\Dev\libclang
      #     set CLAZY_INSTALL_DIR=%CLANG_INSTALL_DIR%
      #     set install_prefix=D:\Dev

      #     curl -L -o  %mingw%.7z  https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/%mingw%.7z          
      #     curl -L -o ninja-win.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
      #     curl -L -o libclang.7z https://github.com/njuFerret/actions/releases/download/build_20241026/libclang-19.1.2_%mingw%_shared.7z
      #     7z x %mingw%.7z
      #     7z x ninja-win.zip -oninja
      #     mkdir %CLANG_INSTALL_DIR%
      #     @REM 7z x libclang.7z -o%CLANG_INSTALL_DIR%\..\
      #     7z x libclang.7z -oD:\Dev
      #     set PATH=%CD%\ninja;%CD%\MinGW\bin;%CLANG_INSTALL_DIR%\bin;%PATH%
      #     llvm-config --version
      #     llvm-config --includedir
      #     dir D:\Dev\libclang

      #     cmake -DCMAKE_INSTALL_PREFIX=%CLAZY_INSTALL_DIR% -DCLANG_LIBRARY_IMPORT="%CLANG_INSTALL_DIR%/lib/libclang.a" -DCMAKE_BUILD_TYPE=Release -G "Ninja" -B./clazy/build -S./clazy

      #     cmake --build clazy/build --parallel

      #     cmake --build clazy/build" --parallel --target install
      - name: toolsets Test 
        shell: cmd
        # system(windows-2022) has shipped with cmake/7zip
        run: |
          echo -------------------- test cmake --------------------------
          cmake --version | findstr version
          echo -------------------- test ninja --------------------------
          ninja --version          
          echo -------------------- test python --------------------------
          python -V
          echo -------------------- test perl --------------------------
          perl -v | findstr version                        
          echo -------------------- test git --------------------------
          git --version
          echo -------------------- test git --------------------------
          ruby --version          
          echo -------------------- test 7z --------------------------
          7z | findstr 7-Zip
          echo -------------------- test end --------------------------


      - name: Config Enviroment and build
        shell: cmd
        run: |
          set mingw=MinGW-x86_64-13.1.0-release-posix-seh-ucrt-rt_v11-rev1
          set START=%CD%
          set _qt_ver=6.8.0
          set _openss_ver=3.4.0
          
          set INSTALL_BASE=D:\Dev
          set CLANG_INSTALL_DIR=%INSTALL_BASE%\libclang
          
          set _qt_src=qt-everywhere-src-%_qt_ver%
          set QT_INSTALL_DIR=%INSTALL_BASE%\Qt\%_qt_ver%\qt
          set _3rdparty=%INSTALL_BASE%\Qt\%_qt_ver%\3rdParty
          set _build_src_dir=D:\qt

          set _deps_=%CD%\deps
          set MYSQL_DIR=%_deps_%\mysql
          set VULKAN_DIR=%_deps_%\vulkanSDK
          set OPENSSL_DIR=%_3rdparty%\openssl
          set BUILD_DIR=%_qt_src%\build
          mkdir %_deps_%          
          mkdir %_3rdparty%

          echo ---------------------------download mingw --------------------------------
          curl -L -o %mingw%.7z       https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/%mingw%.7z          
          echo ---------------------------download ninja --------------------------------
          curl -L -o ninja-win.zip    https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          echo ---------------------------download libclang.7z --------------------------------
          curl -L -o libclang.7z      https://github.com/njuFerret/actions/releases/download/build_20241026/libclang-19.1.2_%mingw%_static.7z
          echo ---------------------------download %_qt_src%.zip --------------------------------
          curl -L -o %_qt_src%.zip    https://download.qt.io/official_releases/qt/6.8/6.8.0/single/%_qt_src%.zip
          echo ---------------------------download openssl --------------------------------
          curl -L -o openssl.7z       https://github.com/njuFerret/actions/releases/download/build_20241026/openssl-%_openss_ver%_%mingw%.7z          
          # curl -L -o vulkanSDK.exe  https://sdk.lunarg.com/sdk/download/1.3.296.0/windows/VulkanSDK-1.3.296.0-Installer.exe
          # vulkanSDK -t %_deps_%/vulkanSDK --am --al -c in
          echo ---------------------------download mysql --------------------------------
          curl -L -o mysql.7z         https://github.com/njuFerret/test_msys2/releases/download/deps/mysql.7z
          echo ---------------------------download vulkanSDK --------------------------------
          curl -L -o vulkanSDK.7z     https://github.com/njuFerret/test_msys2/releases/download/deps_vulkanSDK/vulkanSDK_1.3.296.0.7z
          
          7z x vulkanSDK.7z -o%_deps_%\
          7z x mysql.7z -o%_deps_%\
          7z x %mingw%.7z
          7z x ninja-win.zip -oninja
          7z x libclang.7z -o%INSTALL_BASE%\
          7z x openssl.7z -o%_3rdparty%\
          7z x %_qt_src%.zip 
          move %_qt_src% %_build_src_dir%

          dir 
          
          set PATH=%CD%\ninja;%CD%\MinGW\bin;%CLANG_INSTALL_DIR%\bin;%PATH%                             
          echo ---------------------------Config Qt --------------------------------
          cmake -GNinja -Wno-dev -Wno-deprecated-enum-float-conversion  -Wno-deprecated -Wno-comment -Wno-unknown-pragmas^
            -DCMAKE_BUILD_TYPE=Release ^
            -DFEATURE_optimize_full:BOOL=ON ^
            -DFEATURE_optimize_size:BOOL=ON ^
            -DCMAKE_INSTALL_PREFIX=%QT_INSTALL_DIR% ^
            -DFEATURE_sql_mysql:BOOL=ON ^
            -DMySQL_INCLUDE_DIR=%MYSQL_DIR%/include ^
            -DOPENSSL_ROOT_DIR=%OPENSSL_DIR% ^
            -DOPENSSL_INCLUDE_DIR=%OPENSSL_DIR%/include ^
            -DOPENSSL_SSL_LIBRARY=%OPENSSL_DIR%/lib64/libssl.a ^
            -DOPENSSL_CRYPTO_LIBRARY=%OPENSSL_DIR%/lib64/libcrypto.a ^
            -DFEATURE_opengl_desktop:BOOL=ON ^
            -DFEATURE_opengl_dynamic:BOOL=ON ^
            -DFEATURE_openssl:BOOL=ON ^
            -DFEATURE_opensslv30:BOOL=ON ^
            -DFEATURE_openssl_runtime:BOOL=ON ^
            -DMySQL_LIBRARY=%MYSQL_DIR%/lib/libmariadb.a ^
            -DFEATURE_qt3d_vulkan:BOOL=ON ^
            -DFEATURE_vulkan:BOOL=ON ^
            -DVulkan_LIBRARY=%VULKAN_DIR%/Lib/vulkan-1.a ^
            -DVulkan_INCLUDE_DIR=%VULKAN_DIR%/Include ^
            -DVulkan_GLSLANG_VALIDATOR_EXECUTABLE=%VULKAN_DIR%/bin/glslangValidator.exe ^
            -DFEATURE_qt3d_rhi_renderer:BOOL=ON ^
            -DVulkan_GLSLC_EXECUTABLE=%VULKAN_DIR%/bin/glslc.exe ^
            -DFEATURE_vkb_lang_ar_AR:BOOL=OFF ^
            -DFEATURE_vkb_lang_bg_BG:BOOL=OFF ^
            -DFEATURE_vkb_lang_cs_CZ:BOOL=OFF ^
            -DFEATURE_vkb_lang_da_DK:BOOL=OFF ^
            -DFEATURE_vkb_lang_de_DE:BOOL=OFF ^
            -DFEATURE_vkb_lang_el_GR:BOOL=OFF ^
            -DFEATURE_vkb_lang_en_GB:BOOL=OFF ^
            -DFEATURE_vkb_lang_es_ES:BOOL=OFF ^
            -DFEATURE_vkb_lang_es_MX:BOOL=OFF ^
            -DFEATURE_vkb_lang_et_EE:BOOL=OFF ^
            -DFEATURE_vkb_lang_fa_FA:BOOL=OFF ^
            -DFEATURE_vkb_lang_fi_FI:BOOL=OFF ^
            -DFEATURE_vkb_lang_fr_CA:BOOL=OFF ^
            -DFEATURE_vkb_lang_fr_FR:BOOL=OFF ^
            -DFEATURE_vkb_lang_he_IL:BOOL=OFF ^
            -DFEATURE_vkb_lang_hi_IN:BOOL=OFF ^
            -DFEATURE_vkb_lang_hr_HR:BOOL=OFF ^
            -DFEATURE_vkb_lang_hu_HU:BOOL=OFF ^
            -DFEATURE_vkb_lang_id_ID:BOOL=OFF ^
            -DFEATURE_vkb_lang_it_IT:BOOL=OFF ^
            -DFEATURE_vkb_lang_ja_JP:BOOL=OFF ^
            -DFEATURE_vkb_lang_ko_KR:BOOL=OFF ^
            -DFEATURE_vkb_lang_ms_MY:BOOL=OFF ^
            -DFEATURE_vkb_lang_nb_NO:BOOL=OFF ^
            -DFEATURE_vkb_lang_nl_NL:BOOL=OFF ^
            -DFEATURE_vkb_lang_pl_PL:BOOL=OFF ^
            -DFEATURE_vkb_lang_pt_BR:BOOL=OFF ^
            -DFEATURE_vkb_lang_pt_PT:BOOL=OFF ^
            -DFEATURE_vkb_lang_ro_RO:BOOL=OFF ^
            -DFEATURE_vkb_lang_ru_RU:BOOL=OFF ^
            -DFEATURE_vkb_lang_sk_SK:BOOL=OFF ^
            -DFEATURE_vkb_lang_sl_SI:BOOL=OFF ^
            -DFEATURE_vkb_lang_sq_AL:BOOL=OFF ^
            -DFEATURE_vkb_lang_sr_SP:BOOL=OFF ^
            -DFEATURE_vkb_lang_sv_SE:BOOL=OFF ^
            -DFEATURE_vkb_lang_th_TH:BOOL=OFF ^
            -DFEATURE_vkb_lang_tr_TR:BOOL=OFF ^
            -DFEATURE_vkb_lang_uk_UA:BOOL=OFF ^
            -DFEATURE_vkb_lang_vi_VN:BOOL=OFF ^
            -DFEATURE_vkb_lang_zh_TW:BOOL=OFF ^
            -DFEATURE_zhuyin:BOOL=OFF ^
            -DFEATURE_cangjie:BOOL=OFF ^
            -DFEATURE_cxx20:BOOL=ON ^
            -DFEATURE_cxx2a:BOOL=ON ^
            -DBUILD_WITH_PCH:BOOL=ON ^
            -DQT_BUILD_TESTS_BY_DEFAULT:BOOL=OFF ^
            -DQT_BUILD_EXAMPLES_AS_EXTERNAL:BOOL=OFF ^
            -DQT_BUILD_EXAMPLES:BOOL=ON ^
            -DFEATURE_qtwebengine_build:BOOL=OFF ^
            -DFEATURE_qtwebengine_core_build:BOOL=OFF ^
            -DFEATURE_qtwebengine_quick_build:BOOL=OFF ^
            -DQT_FEATURE_qtpdf_build:BOOL=OFF ^
            -DQT_FEATURE_qtpdf_quick_build:BOOL=OFF ^
            -S%_build_src_dir% ^
            -B%BUILD_DIR%

          type %_qt_src%\build\config.summary
          cmake --build %BUILD_DIR% --parallel
          cmake --install %BUILD_DIR% 
          copy %OPENSSL_DIR%\bin\libcrypto-3-x64.dll   %QT_INSTALL_DIR%\bin /y
          copy %OPENSSL_DIR%\bin\libssl-3-x64.dll %QT_INSTALL_DIR%\bin /y
          copy %MYSQL_DIR%\lib\libmariadb.dll %QT_INSTALL_DIR%\bin /y
          copy %VULKAN_DIR%\vulkan-1.dll %QT_INSTALL_DIR%\bin /y
          cmake --build %BUILD_DIR% --parallel --target qch_docs 
          cmake --build %BUILD_DIR% --parallel --target install_qch_docs
          cd %_qt_src%\qtcharts\plugins
          mkdir build & cd build & qmake .. & make release & make install & cd .. & rd /q /s build

          7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on %_qt_ver%-%mingw%.7z %QT_INSTALL_DIR%\..\
          

  #     - name: upload zipped vulkanSDK file
  #       uses:  actions/upload-artifact@v4.4.3
  #       with:
  #         name: 'vulkanSDK'
  #         path: ./vulkanSDK_1.3.296.0.7z


  # release:
  #   permissions:
  #     contents: write
  
  #   runs-on: ubuntu-latest
  #   needs: [build]

  #   steps:
  #   - name: Download openssl
  #     uses: actions/download-artifact@v4
  #     with:          
  #       name: 'vulkanSDK'          
  #       # merge-multiple: true
  #       path: ./

  #   - name: Unzip openssl
  #     shell: bash
  #     run: |
  #       ls -l   
  #       7z x vulkanSDK_1.3.296.0.7z
  #       ls -l

  #   - name: Upload to Release
  #     id: upload_to_release
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       files: "*.7z"
  #       tag_name: deps_vulkanSDK
           
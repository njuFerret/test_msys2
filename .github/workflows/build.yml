name: Test build freetype & harfbuzz

on:
  push:
    branches: [ "dev" ]

jobs:
  versions_config:
    name: Config libraries 
    runs-on: ubuntu-latest
    outputs:      
      mingw-version: ${{ steps.get-versions.outputs.mingw-version }}
      mingw-link-prefix: ${{ steps.get-versions.outputs.mingw-link-prefix }}
      install-prefix: ${{ steps.get-versions.outputs.install-prefix }}
      qt-version: ${{ steps.get-versions.outputs.qt-version }}
      freetype-version: ${{ steps.get-versions.outputs.freetype-version }}
      harfbuzz-version: ${{ steps.get-versions.outputs.harfbuzz-version }}
      freetype-version-git: ${{ steps.get-versions.outputs.freetype-version-git }}

      # cmake-version: ${{ steps.get-versions.outputs.cmake-version }}
      build-date: ${{ steps.date.outputs.build-date }}
    steps:
      - name: generate library version files
        uses: actions/checkout@v4.2.2
      - name: generate version files
        run: |
          python3 ./utils/libraries_version.py
          ls -l versions
          
      - name: get versions
        id: get-versions
        run: |
          echo "mingw-version=$(cat versions/mingw)" >> $GITHUB_OUTPUT
          echo "mingw-link-prefix=$(cat versions/mingw_link_prefix)" >> $GITHUB_OUTPUT
          echo "qt-version=$(cat versions/qt)" >> $GITHUB_OUTPUT
          echo "install-prefix=$(cat versions/install_prefix)" >> $GITHUB_OUTPUT
          echo "freetype-version=$(cat versions/freetype)" >> $GITHUB_OUTPUT
          echo "harfbuzz-version=$(cat versions/harfbuzz)" >> $GITHUB_OUTPUT
          echo "freetype-version-git=$(cat versions/freetype | sed 's|\.|-|g')" >> $GITHUB_OUTPUT
          

      - name: get build date      
        id: date        
        run: |  
           echo "build-date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  check-versions:
    name: Check versions
    runs-on: ubuntu-latest
    needs: versions_config
    steps:
      - name: show library versions
        run: |
          echo "mingw-version=${{ needs.versions_config.outputs.mingw-version }}"
          echo "mingw-link-prefix=${{ needs.versions_config.outputs.mingw-link-prefix }}"
          echo "qt-version=${{ needs.versions_config.outputs.qt-version }}"
          echo "install-prefix=${{ needs.versions_config.outputs.install-prefix }}"
          echo "freetype-version=${{ needs.versions_config.outputs.freetype-version }}"
          echo "harfbuzz-version=${{ needs.versions_config.outputs.harfbuzz-version }}"
          echo "freetype-version-git=${{ needs.versions_config.outputs.freetype-version-git }}"


  build:
    name: build freetype & harfbuzz
    needs:
      - versions_config
      - check-versions    
    runs-on: 
      - windows-2022

    steps:
      - name: Install ninja (windows)
        run: choco install ninja

      # - name: check out 
      #   uses: actions/checkout@v4.2.2
      #   with:
      #     repository: 'njuFerret/DXSDK201006'
      #     path: 'DXSDK201006'

      - name: check out 
        uses: actions/checkout@v4.2.2      

      - name: check out freetype
        uses: actions/checkout@v4.2.2   
        with:
          repository: 'freetype/freetype'
          ref: 'VER-${{ needs.versions_config.outputs.freetype-version-git }}'
          path: 'freetype'

      - name: check out harfbuzz
        uses: actions/checkout@v4.2.2   
        with:
          repository: 'harfbuzz/harfbuzz'
          ref: '${{ needs.versions_config.outputs.harfbuzz-version }}'
          path: 'harfbuzz'


      - name: Config Enviroment
        shell: cmd
        run: |
          set START=%CD%
          set mingw=${{ needs.versions_config.outputs.mingw-version }}
          set _qt_ver=${{ needs.versions_config.outputs.qt-version }}
          set INSTALL_BASE=${{ needs.versions_config.outputs.install-prefix }}

          set QT_INSTALL_DIR=%INSTALL_BASE%\Qt\%_qt_ver%\qt
          set _3rdparty=%INSTALL_BASE%\Qt\%_qt_ver%\3rdParty

          mkdir %_3rdparty%

          echo ---------------------------download mingw --------------------------------
          curl -L -o %mingw%.7z       ${{ needs.versions_config.outputs.mingw-link-prefix }}/%mingw%.7z          

          7z x %mingw%.7z



      - name: toolsets Test 
        shell: cmd
        run: |
          set INSTALL_BASE=${{ needs.versions_config.outputs.install-prefix }}

          set PATH=%CD%\MinGW\bin;%PATH%

          echo -------------------- test cmake --------------------------
          cmake --version | findstr version
          echo -------------------- test ninja --------------------------
          ninja --version          
          echo -------------------- test python --------------------------
          python -V
          echo -------------------- test perl --------------------------
          perl -v | findstr version                        
          echo -------------------- test git --------------------------
          git --version
          echo -------------------- test git --------------------------
          ruby --version          
          echo -------------------- test 7z --------------------------
          7z | findstr 7-Zip
          echo -------------------- test end --------------------------


      - name: Config & build 
        shell: cmd
        run: |          
          set START=%CD%
          set mingw=${{ needs.versions_config.outputs.mingw-version }}
          set _qt_ver=${{ needs.versions_config.outputs.qt-version }}
          set INSTALL_BASE=${{ needs.versions_config.outputs.install-prefix }}

          set QT_INSTALL_DIR=%INSTALL_BASE%\Qt\%_qt_ver%\qt
          set _3rdparty=%INSTALL_BASE%\Qt\%_qt_ver%\3rdParty

          set FT_PREFIX=%_3rdparty%\freetype
          set HB_PREFIX=%_3rdparty%\harfbuzz
          set BUILD_DIR=%START%\build

          set PATH=%CD%\MinGW\bin;%PATH%
          @REM 第一次编译ft
          rd /q /s %BUILD_DIR% > NUL
          echo ---------------------------build freetype 1th --------------------------------
          @REM 配置 ft (不带hb)
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=%FT_PREFIX% -DFT_DISABLE_HARFBUZZ:BOOL=ON -S%START%/freetype -B%BUILD_DIR%

          :: 编译&安装ft
          cmake --build %BUILD_DIR% --parallel
          cmake --build %BUILD_DIR% --parallel --target install

          :: 删除编译目录
          rd /q /s %BUILD_DIR%

          echo ---------------------------build harfbuzz 1th --------------------------------
          :: 配置 hb
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release ^
              -DCMAKE_INSTALL_PREFIX:PATH=%HB_PREFIX% ^
              -DHB_HAVE_FREETYPE:BOOL=ON ^
              -DFREETYPE_INCLUDE_DIR_freetype2:PATH=%FT_PREFIX%/include/freetype2 ^
              -DFREETYPE_INCLUDE_DIR_ft2build:PATH=%FT_PREFIX%/include/freetype2 ^
              -DFREETYPE_LIBRARY_RELEASE:FILEPATH=%FT_PREFIX%/lib/libfreetype.a ^
              -DCMAKE_CXX_FLAGS=" -static" ^
              -S%START%/harfbuzz ^
              -B%BUILD_DIR%

          :: 编译&安装 hb
          cmake --build %BUILD_DIR% --parallel
          cmake --build %BUILD_DIR% --parallel --target install

          :: 删除第一次ft安装文件
          rd /q /s %FT_PREFIX% > NUL

          :: 删除编译目录
          rd /q /s %BUILD_DIR%
          echo ---------------------------build freetype 2nd --------------------------------
          :: 第二次配置 ft  (带hb)
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release ^
              -DCMAKE_INSTALL_PREFIX:PATH=%FT_PREFIX% ^
              -DFT_DISABLE_HARFBUZZ:BOOL=OFF ^
              -DHarfBuzz_INCLUDE_DIR:PATH=%HB_PREFIX%/include/harfbuzz ^
              -DHarfBuzz_LIBRARY:FILEPATH=%HB_PREFIX%/lib/libharfbuzz.a ^
              -S%START%/freetype ^
              -B%BUILD_DIR%

          :: 编译安装安装ft
          cmake --build %BUILD_DIR% --parallel
          cmake --build %BUILD_DIR% --parallel --target install


          :: 删除第一次hb安装文件
          rd /q /s %HB_PREFIX% > NUL
          :: 删除编译目录
          rd /q /s %BUILD_DIR%  > NUL

          echo ---------------------------build harfbuzz 2nd --------------------------------
          :: 第二次配置 hb (带ft)
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release ^
              -DCMAKE_INSTALL_PREFIX:PATH=%HB_PREFIX% ^
              -DHB_HAVE_FREETYPE:BOOL=ON ^
              -DFREETYPE_INCLUDE_DIR_freetype2:PATH=%FT_PREFIX%/include/freetype2 ^
              -DFREETYPE_INCLUDE_DIR_ft2build:PATH=%FT_PREFIX%/include/freetype2 ^
              -DFREETYPE_LIBRARY_RELEASE:FILEPATH=%FT_PREFIX%/lib/libfreetype.a ^
              -DCMAKE_CXX_FLAGS=" -static" ^
              -S%START%/harfbuzz ^
              -B%BUILD_DIR%

          :: 编译&安装 hb 
          cmake --build %BUILD_DIR% --parallel
          cmake --build %BUILD_DIR% --parallel --target install


      - name: post process
        shell: cmd
        run: |     
          set START=%CD%
          set mingw=${{ needs.versions_config.outputs.mingw-version }}
          set _qt_ver=${{ needs.versions_config.outputs.qt-version }}
          set INSTALL_BASE=${{ needs.versions_config.outputs.install-prefix }}

          set QT_INSTALL_DIR=%INSTALL_BASE%\Qt\%_qt_ver%\qt
          set _3rdparty=%INSTALL_BASE%\Qt\%_qt_ver%\3rdParty

          set FT_PREFIX=%_3rdparty%\freetype
          set HB_PREFIX=%_3rdparty%\harfbuzz
          set BUILD_DIR=%START%\build_freetype 
          
          echo ---------------------------zipped qt %_qt_ver% --------------------------------
          7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on freetype-${{ needs.versions_config.outputs.freetype-version }}_%mingw%.7z %FT_PREFIX%\freetype
          7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on harfbuzz-${{ needs.versions_config.outputs.harfbuzz-version }}_%mingw%.7z %HB_PREFIX%\harfbuzz
    
          dir 

      - name: upload zipped files
        uses:  actions/upload-artifact@v4.4.3
        with:
          name: 'ziped-freetype'
          path: ./freetype-${{ needs.versions_config.outputs.freetype-version }}_${{ needs.versions_config.outputs.mingw-version }}.7z

      - name: upload zipped files
        uses:  actions/upload-artifact@v4.4.3
        with:
          name: 'ziped-harfbuzz'
          path: ./harfbuzz-${{ needs.versions_config.outputs.harfbuzz-version }}_${{ needs.versions_config.outputs.mingw-version }}.7z



  release:
    permissions:
      contents: write
  
    runs-on: ubuntu-latest
    needs: 
      - build
      - versions_config

    steps:
    - name: Download freetype
      uses: actions/download-artifact@v4.1.8
      with:          
        name: 'ziped-freetype'          
        # merge-multiple: true
        path: ./

    - name: Download harfbuzz
      uses: actions/download-artifact@v4.1.8
      with:          
        name: 'ziped-harfbuzz'          
        # merge-multiple: true
        path: ./

    - name: Unzip freetype
      shell: bash
      run: |
        ls -l   
        7z x freetype-${{ needs.versions_config.outputs.freetype-version }}_${{ needs.versions_config.outputs.mingw-version }}.7z
        ls -l

    - name: Upload to Release
      id: upload_to_release
      uses: softprops/action-gh-release@v2
      with:
        files: "*.7z"
        tag_name: ft-hb-mingw-build
           

name: Test build Qt

on:
  push:
    branches: [ "dev" ]

jobs:
  build:
    name: Test build Qt
    runs-on: 
      - windows-2022

    steps:
      # - name: check out openssl
      #   uses: actions/checkout@v4
      #   with:
      #     repository: 'openssl/openssl'
      #     ref: 'openssl-${{ inputs.openssl-version }}'
      - name: check out 
        uses: actions/checkout@v4        

      # - uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: UCRT64          
      #     update: false
      #     # install: >-
      #     #   perl

      # - name: get clazy
      #   uses: actions/checkout@v4.1.1
      #   with:
      #     repository: 'KDE/clazy'
      #     # ref: 'openssl-${{ inputs.openssl-version }}'
      #     ref: 'v1.12'
      #     path: clazy

      
      # - name: Config Enviroment and build
      #   shell: cmd
      #   run: |
      #     set mingw=MinGW-x86_64-13.1.0-release-posix-seh-ucrt-rt_v11-rev1
      #     set START=%CD%
      #     set CLANG_INSTALL_DIR=D:\Dev\libclang
      #     set CLAZY_INSTALL_DIR=%CLANG_INSTALL_DIR%
      #     set install_prefix=D:\Dev

      #     curl -L -o  %mingw%.7z  https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/%mingw%.7z          
      #     curl -L -o ninja-win.zip https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
      #     curl -L -o libclang.7z https://github.com/njuFerret/actions/releases/download/build_20241026/libclang-19.1.2_%mingw%_shared.7z
      #     7z x %mingw%.7z
      #     7z x ninja-win.zip -oninja
      #     mkdir %CLANG_INSTALL_DIR%
      #     @REM 7z x libclang.7z -o%CLANG_INSTALL_DIR%\..\
      #     7z x libclang.7z -oD:\Dev
      #     set PATH=%CD%\ninja;%CD%\MinGW\bin;%CLANG_INSTALL_DIR%\bin;%PATH%
      #     llvm-config --version
      #     llvm-config --includedir
      #     dir D:\Dev\libclang

      #     cmake -DCMAKE_INSTALL_PREFIX=%CLAZY_INSTALL_DIR% -DCLANG_LIBRARY_IMPORT="%CLANG_INSTALL_DIR%/lib/libclang.a" -DCMAKE_BUILD_TYPE=Release -G "Ninja" -B./clazy/build -S./clazy

      #     cmake --build clazy/build --parallel

      #     cmake --build clazy/build" --parallel --target install
      - name: toolsets Test 
        shell: cmd
        # system(windows-2022) has shipped with cmake/7zip
        run: |
          echo -------------------- test cmake --------------------------
          cmake --version | findstr version
          echo -------------------- test ninja --------------------------
          ninja --version          
          echo -------------------- test python --------------------------
          python -V
          echo -------------------- test perl --------------------------
          perl -v | findstr version                        
          echo -------------------- test git --------------------------
          git --version
          echo -------------------- test git --------------------------
          ruby --version          
          echo -------------------- test 7z --------------------------
          7z | findstr 7-Zip
          echo -------------------- test end --------------------------


      - name: Config Enviroment and build
        shell: cmd
        run: |
          set mingw=MinGW-x86_64-13.1.0-release-posix-seh-ucrt-rt_v11-rev1
          set START=%CD%
          set _qt_ver=6.8.0
          set _openss_ver=3.4.0

          
          set INSTALL_BASE=D:\Dev
          set CLANG_INSTALL_DIR=%INSTALL_BASE%\libclang
          
          set _qt_src=qt-everywhere-src-%_qtver%
          set _3rdparty=%INSTALL_BASE%\Qt\%_qt_ver%\3rdParty

          set _deps_=%CD%\deps
          set MYSQL_DIR=%_deps_%\mysql
          set VULKAN_DIR=%_deps_%\VulkanSDK
          set OPENSSL_DIR=%_3rdparty%\openssl
          mkdir %_deps_%
          mkdir %INSTALL_BASE%
          mkdir %_3rdparty%


          curl -L -o %mingw%.7z       https://github.com/njuFerret/qt6_mingw_build/releases/download/deps/%mingw%.7z          
          curl -L -o ninja-win.zip    https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip
          curl -L -o libclang.7z      https://github.com/njuFerret/actions/releases/download/build_20241026/libclang-19.1.2_%mingw%_shared.7z
          # curl -L -o %_qt_src%.zip  https://download.qt.io/official_releases/qt/6.8/6.8.0/single/%_qt_src%.zip
          curl -L -o openssl.7z       https://github.com/njuFerret/actions/releases/download/build_20241026/openssl-%_openss_ver%_%mingw%.7z
          curl -L -o VulkanSDK.exe    https://sdk.lunarg.com/sdk/download/1.3.296.0/windows/VulkanSDK-1.3.296.0-Installer.exe
          
          VulkanSDK -t %_deps_%/VulkanSDK --am --al -c in
          dir %_deps_%\VulkanSDK
          
          7z x %mingw%.7z
          7z x ninja-win.zip -oninja                    
          
          7z x libclang.7z -o%INSTALL_BASE%\
          7z x openssl.7z -o%_deps_%\
          # 7z x %_qt_src%.zip
          
          set PATH=%CD%\ninja;%CD%\MinGW\bin;%CLANG_INSTALL_DIR%\bin;%PATH%

          7z a vulkanSDK_1.3.296.0.7z %CD%\deps\vulkanSDK
          

      - name: upload zipped vulkanSDK file
        uses:  actions/upload-artifact@v4.4.3
        with:
          name: 'vulkanSDK'
          path: ./vulkanSDK_1.3.296.0.7z


  release:
    permissions:
      contents: write
  
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Download openssl
      uses: actions/download-artifact@v4
      with:          
        name: 'vulkanSDK'          
        # merge-multiple: true
        path: ./

    - name: Unzip openssl
      shell: bash
      run: |
        ls -l   
        7z x vulkanSDK_1.3.296.0.7z
        ls -l
        
        


    - name: Upload to Release
      id: upload_to_release
      uses: softprops/action-gh-release@v2
      with:
        files: "*.7z"
        tag_name: deps_vulkanSDK
           